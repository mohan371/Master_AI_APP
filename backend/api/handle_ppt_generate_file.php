<?php
// --- Error Reporting & Limits ---
ini_set('display_errors', 1); // Show errors for debugging
error_reporting(E_ALL);
ini_set('max_execution_time', 300); // 5 minutes for generation
ini_set('memory_limit', '512M');    // Increase memory

// --- Includes & Namespaces ---
session_start();
require_once "../../vendor/autoload.php"; // Composer autoloader is essential

use PhpOffice\PhpPresentation\PhpPresentation;
use PhpOffice\PhpPresentation\IOFactory;
use PhpOffice\PhpPresentation\Style\Color;
use PhpOffice\PhpPresentation\Style\Alignment;
use PhpOffice\PhpPresentation\Style\Bullet;
use PhpOffice\PhpPresentation\Shape\RichText; // Explicitly use RichText

// --- Security & Input Check ---
header('Content-Type: application/json'); // We will always send JSON back

if (!isset($_SESSION["loggedin"]) || $_SESSION["loggedin"] !== true) {
    http_response_code(401); // Unauthorized
    ob_clean(); // Clean buffer before error JSON
    echo json_encode(["status" => "error", "message" => "Authentication required."]);
    exit;
}
if ($_SERVER["REQUEST_METHOD"] !== "POST") {
    http_response_code(405); // Method Not Allowed
    ob_clean(); // Clean buffer before error JSON
    echo json_encode(["status" => "error", "message" => "POST method required."]);
    exit;
}

// Get input from JavaScript
$input = json_decode(file_get_contents('php://input'), true);

// Get topic (with default)
$topic = "presentation"; // Default filename base
if (isset($input['topic']) && !empty($input['topic'])) {
     // Basic sanitization for topic used in properties/filename later
    $topic = htmlspecialchars(strip_tags($input['topic']));
}

// Get raw AI content
if (!isset($input['raw_content']) || empty($input['raw_content'])) {
    http_response_code(400); // Bad Request
    ob_clean(); // Clean buffer before error JSON
    echo json_encode(["status" => "error", "message" => "Presentation content is missing."]);
    exit;
}
$ai_response_text = $input['raw_content'];

// --- Create PPTX using PHPPresentation ---
try {
    $objPHPPresentation = new PhpPresentation();

    // --- Basic Styling Setup ---
    $objPHPPresentation->getLayout()->setDocumentLayout('screen16x9', false);
    $bgColor = 'FFF0F4F9';
    $titleColor = 'FF1F1F1F';
    $textColor = 'FF5F6368';
    $accentColor = 'FF1967D2';
    // --- End Basic Styling Setup ---

    // Document Properties
    $objPHPPresentation->getDocumentProperties()->setCreator("Master AI Hub")
                                      ->setLastModifiedBy("Master AI Hub Bot")
                                      ->setTitle("Presentation on " . $topic)
                                      ->setSubject($topic)
                                      ->setDescription("Generated by Master AI Hub");

    // --- Parse AI Text and Create Slides ---
    $lines = explode("\n", trim($ai_response_text));
    $currentSlide = null;
    $currentShape = null; // To hold the text box for bullet points
    $isNotesSection = false;

    foreach ($lines as $line) {
        $line = trim($line);
        if (empty($line)) continue;

        // --- Match Slide Start ---
        if (preg_match('/^### Slide \d+:(.*)/i', $line, $matches)) {
            $isNotesSection = false;
            $currentSlide = $objPHPPresentation->createSlide();
            $currentShape = null; // Reset text shape for new slide

            // Apply Slide Background (Safe Check)
            $slideBackground = $currentSlide->getBackground();
            if ($slideBackground) {
                $slideBackground->setFillType(\PhpOffice\PhpPresentation\Style\Fill::FILL_SOLID)
                                ->setStartColor(new Color($bgColor));
            }

            // Add Title shape if text exists on this line
            $titleText = trim($matches[1]);
            if ($titleText) {
                $shape = $currentSlide->createRichTextShape()
                      ->setHeight(100)->setWidth(850)->setOffsetX(55)->setOffsetY(50);
                $shape->getActiveParagraph()->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $textRun = $shape->createTextRun($titleText);
                $textRun->getFont()->setBold(true)->setSize(36)->setColor(new Color($titleColor))->setName('Poppins');
            }
        // --- Match Explicit Title Line ---
        } elseif (preg_match('/^#### Title:(.*)/i', $line, $matches) && $currentSlide) {
            $isNotesSection = false;
            $titleText = trim($matches[1]);

            // Try to find an existing title shape (basic position check)
            $titleShape = null;
            foreach($currentSlide->getShapeCollection() as $shape) {
                // Adjust check if needed based on actual template/output shape positions
                if ($shape instanceof RichText && $shape->getOffsetY() < 150 && $shape->getHeight() <= 120) {
                     $titleShape = $shape; break;
                }
            }

            if ($titleShape) { // Update existing title
                // **CORRECTION:** Create a new paragraph to replace content
                $p = $titleShape->createParagraph();
                $p->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $textRun = $p->createTextRun($titleText);
                $textRun->getFont()->setBold(true)->setSize(36)->setColor(new Color($titleColor))->setName('Poppins');
            } elseif ($titleText) { // Create title if none found
                $shape = $currentSlide->createRichTextShape()
                      ->setHeight(100)->setWidth(850)->setOffsetX(55)->setOffsetY(50);
                $p = $shape->getActiveParagraph(); // Get the initial paragraph
                $p->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $textRun = $p->createTextRun($titleText);
                $textRun->getFont()->setBold(true)->setSize(36)->setColor(new Color($titleColor))->setName('Poppins');
            }
        // --- Match Bullet Point Line ---
        } elseif (preg_match('/^- (\*\*.*?\*\*|.*?)(?::)?(.*)/', $line, $matches) && $currentSlide) {
             $isNotesSection = false;
             // Create main text shape if it doesn't exist yet for this slide
             if ($currentShape === null) {
                 $currentShape = $currentSlide->createRichTextShape()
                      ->setHeight(500)->setWidth(850)->setOffsetX(55)->setOffsetY(180);
                 // Apply default style and bullet to the FIRST paragraph
                 $p = $currentShape->getActiveParagraph();
                 $p->getFont()->setSize(18)->setColor(new Color($textColor))->setName('Inter');
                 $p->getBulletStyle()->setBulletType(Bullet::TYPE_BULLET);
                 $p->getAlignment()->setMarginLeft(35)->setIndent(-35); // Apply indent to first paragraph too
             } else {
                 // Create a new paragraph for subsequent bullets
                 $p = $currentShape->createParagraph();
                 // Apply default style to the new paragraph
                 $p->getFont()->setSize(18)->setColor(new Color($textColor))->setName('Inter');
             }

             // Extract parts of the bullet point
             $boldPart = trim($matches[1]);
             $restPart = trim($matches[2] ?? '');

             // Add text runs with styling
             if (strpos($boldPart, '**') === 0 && strrpos($boldPart, '**') === (strlen($boldPart) - 2)) {
                 $textRun = $p->createTextRun(substr($boldPart, 2, -2)); // Add bold part
                 $textRun->getFont()->setBold(true)->setColor(new Color($accentColor));
                 if ($restPart) {
                     $p->createTextRun(': ' . $restPart)->getFont()->setColor(new Color($textColor)); // Add rest
                 }
             } else {
                 $p->createTextRun($boldPart . ($restPart ? ': ' . $restPart : ''))->getFont()->setColor(new Color($textColor));
             }

             // Apply bullet style and indent to the current paragraph
             $p->getBulletStyle()->setBulletType(Bullet::TYPE_BULLET);
             $p->getAlignment()->setMarginLeft(35)->setIndent(-35);

        // --- Match Speaker Note Start ---
        } elseif (preg_match('/^\*\*Speaker Note:\*\*(.*)/i', $line, $matches) && $currentSlide) {
            $isNotesSection = true;
            $notes = $currentSlide->getNote();
            // **CORRECTION:** Do not clear the collection, just create the shape
            $shape = $notes->createRichTextShape()->setHeight(300)->setWidth(600);
            $p = $shape->getActiveParagraph();
            $p->createTextRun("Speaker Notes:")->getFont()->setBold(true);
            $shape->createParagraph()->createTextRun(trim($matches[1])); // Add first line of notes content

        // --- Match Speaker Note Continuation ---
        } elseif ($isNotesSection && $currentSlide) {
             $notes = $currentSlide->getNote();
             // Find the latest RichText shape in notes to append to
             $shape = null;
             foreach ($notes->getShapeCollection() as $noteShape) {
                if ($noteShape instanceof RichText) { $shape = $noteShape; } // Get the last one
             }
             if ($shape) {
                 // Add line as a new paragraph
                 $shape->createParagraph()->createTextRun($line);
             }
        }
         // Implicitly ignore lines that don't match any pattern
    } // End foreach line

    // --- Save the PPTX File Temporarily ---
    // Sanitize filename based on topic
    $safe_topic = preg_replace('/[^a-zA-Z0-9_-]/', '_', $topic);
    $safe_topic = substr($safe_topic, 0, 50); // Limit length
    $filename = $safe_topic . "_" . uniqid() . ".pptx";
    $filepath = "../temp/" . $filename;

    // Ensure temp directory exists
    if (!is_dir('../temp')) {
        if (!mkdir('../temp', 0777, true)) {
            throw new Exception("Failed to create temporary directory.");
        }
    }
    // Ensure temp directory is writable
    if (!is_writable('../temp')) {
        throw new Exception("Temporary directory is not writable.");
    }


    $oWriterPPTX = IOFactory::createWriter($objPHPPresentation, 'PowerPoint2007');
    $oWriterPPTX->save($filepath);

    // Check if file was actually saved
    if (!file_exists($filepath)) {
        throw new Exception("Failed to save the PPTX file to the temporary location.");
    }

    // --- Send Success Response ---
    http_response_code(200); // Explicitly set OK status
    ob_clean(); // Clean buffer before JSON
    echo json_encode([
        "status" => "success",
        "message" => "Presentation generated successfully!",
        "filename" => $filename // Send only the filename
    ]);
    exit;

} catch (Exception $e) {
    // Catch any exception during PPTX creation or saving
    http_response_code(500); // Internal Server Error
    ob_clean(); // Clean buffer before error JSON
    // Provide detailed error message for debugging
    echo json_encode([
        "status" => "error",
        "message" => "Failed to create PPTX: " . $e->getMessage(),
        "line" => $e->getLine(), // Include line number where error occurred
        "file" => basename($e->getFile()) // Include filename where error occurred
     ]);
    exit;
}
?>